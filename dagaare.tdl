;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Dagaare
;;; created at:
;;;     Thu Feb 01 07:47:51 UTC 2018
;;; based on Matrix customization system version of:
;;;     Thu Feb  1 06:54:01 UTC 2018
;;;
;;; Based on Bodomo 1997
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ PRON bool,
    AUX bool,
    POSSESSOR poss,
    FORM form ].

noun :+ [ CASE case ].

inflected :+ [ ASPECT-FLAG luk ].

infl-satisfied :+ [ ASPECT-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number,
    GEND gender ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

possessive := poss.

nonpossessive := poss.

possessor := possessive.

possessum := possessive.

possessive-1 := possessive.

possessor-1 := possessor & possessive-1.

possessum-1 := possessum & possessive-1.

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                                POSSESSUM nonpossessive ],
    SYNSEM.LOCAL.CAT.VAL.SPEC < >,
    C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

possessive-2 := possessive.

possessor-2 := possessor & possessive-2.

possessum-2 := possessum & possessive-2.

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
sg := number.
pl := number.

;;; Gender

gender := *top*.
hmn := gender.
nhmn := gender.

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

nonfuture := tense.
past := nonfuture.
present := nonfuture.
future := tense.

;;; Aspect

perfective := aspect.
imperfective := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD +pd ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT [ VAL.SPR < >,
                                      HEAD +vjrcdmo &
                                           [ POSSESSOR nonpossessive ] ] ] ].

cn-lex-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

nhmn-cn-lx-noun-lex := cn-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND nhmn ].

hmn-cn-lx-noun-lex := cn-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND hmn ].

pn-lx-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

pron-lex-noun-lex := no-spr-noun-lex.

1st-sg-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                       NUM sg ] ].

2nd-sg-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM sg ] ].

3rd-sg-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 3rd ] ].

str-pron-lex-noun-lex := nom-pron-lex-noun-lex.

wk-pron-lex-noun-lex := nom-pron-lex-noun-lex.

2nd-sg-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 2nd ] ].

3rd-sg-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 3rd ] ].

nom-pron-lex-noun-lex := pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

1st-sg-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

1st-pl-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

1st-pl-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

2nd-pl-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 2nd ] ].

2nd-pl-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM pl ] ].

3rd-pl-hmn-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND hmn ] ].

3rd-pl-hmn-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND hmn ] ].

3rd-pl-nhmn-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND nhmn ] ].

3rd-pl-nhmn-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND nhmn ] ].

acc-pron-lex-noun-lex := pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

1st-sg-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

2nd-sg-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 2nd ] ].

3rd-sg-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 3rd ] ].

1st-pl-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

2nd-pl-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 2nd ] ].

3rd-pl-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND hmn ] ].

3rd-pl-nhmn-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND nhmn ] ].

nhmn1-cn-lx-noun-lex := nhmn-cn-lx-noun-lex.

nhmn6-cn-lx-noun-lex := nhmn-cn-lx-noun-lex.

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb,
    INFLECTED.ASPECT-FLAG - ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

clausal-verb-lex := main-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT.VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < > ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

clausal-nom-verb-lex := clausal-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

itr-verb-lex-verb-lex := nom-intransitive-verb-lex.

tr-verb-lex-verb-lex := nom-acc-transitive-verb-lex.

dtr-verb-lex-verb-lex := tr-verb-lex-verb-lex.

clauscomp-clausal-verb-lex := clausal-nom-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD comp ] > ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

nonfut-neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE nonfuture,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ] ].

fut-neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ] ].

past-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ] ].

fut-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;; Adjectives

adj-lex := basic-intersective-adjective-lex.

attr-adj-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

attr-only-adj-lex := attr-adj-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD -,
                       VAL.SUBJ < > ] ].

;;; Complementizers

comp-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ HEAD verb,
                           MC -,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

clauscomp-verb-lex-clausal-verb-lex := clausal-second-arg-trans-lex-item.

comps1-comp-lex-item := comp-lex-item.

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

def-det-lx-determiner-lex := determiner-lex & no-icons-lex-item.

specific-det-lx-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

indef-det-lx-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

infostr-marking-mod-lex := no-rels-hcons-lex-item & one-icons-lex-item &
  [ SYNSEM.LOCAL [ CAT [ HEAD adv &
                              [ MOD < [ LIGHT luk,
                                        LOCAL [ CAT.MKG [ FC na-or--,
                                                          TP na-or-- ],
                                                CONT.HOOK [ INDEX #target,
                                                            ICONS-KEY #icons ] ] ] > ],
                         VAL [ SUBJ < >,
                               COMPS < >,
                               SPR < >,
                               SPEC < > ] ],
                   CONT.ICONS <! #icons &
                                 [ IARG2 #target ] !> ] ].

focus-marking-mod-lex := infostr-marking-mod-lex &
  [ SYNSEM.LOCAL.CAT [ MKG fc,
                       HEAD.MOD < [ L-PERIPH luk,
                                    LOCAL [ CAT.HEAD +nv,
                                            CONT.HOOK.ICONS-KEY focus ] ] > ] ].

two-rel-adposition-lex := basic-icons-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD adp,
                           VAL.COMPS < [ LOCAL [ CAT cat-sat,
                                                 CONT.HOOK #hook &
                                                           [ INDEX #ind,
                                                             ICONS-KEY.IARG1 #clause ] ] ] > ],
                     CONT.HOOK #hook &
                               [ CLAUSE-KEY #clause ] ],
             LKEYS.KEYREL arg12-ev-relation &
                          [ ARG2 #ind ] ] ].

possessor-adp-lex-2 := two-rel-adposition-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.POSSESSOR possessor-2,
                         POSSESSUM nonpossessive,
                         VAL [ SPR < >,
                               COMPS.FIRST [ OPT -,
                                             LOCAL [ CAT [ HEAD noun,
                                                           VAL.SPR < > ],
                                                     CONT.HOOK.INDEX #possessor ] ],
                               SPEC.FIRST.LOCAL [ CAT [ VAL.SPR < [ ] >,
                                                        HEAD.PRON - ],
                                                  CONT.HOOK [ INDEX #possessum,
                                                              LTOP #lbl ] ] ] ],
                   CONT [ ICONS <!  !>,
                          RELS <! arg12-ev-relation &
                                  [ PRED "poss_rel",
                                    LBL #lbl,
                                    ARG1 #possessum,
                                    ARG2 #possessor ], quant-relation &
                                                       [ PRED "exist_q_rel",
                                                         ARG0 #possessum,
                                                         RSTR #harg ] !>,
                          HCONS <! qeq &
                                   [ HARG #harg,
                                     LARG #lbl ] !> ] ] ].

pos-sg-adp-lex := possessor-adp-lex-2 &
  [ SYNSEM.LOCAL.CAT [ VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG #png,
                       HEAD.POSSESSOR.POSS-AGR #png &
                                               [ NUM sg ] ] ].

pos-pl-adp-lex := possessor-adp-lex-2 &
  [ SYNSEM.LOCAL.CAT [ VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG #png,
                       HEAD.POSSESSOR.POSS-AGR #png &
                                               [ NUM pl ] ] ].

pos-general-adp-lex := possessor-adp-lex-2 &
  [ SYNSEM.LOCAL.CAT.HEAD.POSSESSOR.POSS-AGR #png,
    SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG #png ].

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ MC +,
                           HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

num-hmn-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR hmn-cn-lx-noun-lex &
        [ INFLECTED #infl ] ].

num-hmn-sg-lex-rule := num-hmn-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

num-hmn-pl-lex-rule := num-hmn-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

num-nhmn1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR nhmn1-cn-lx-noun-lex &
        [ INFLECTED #infl ] ].

num-nhmn1-sg-lex-rule := num-nhmn1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

num-nhmn1-pl-lex-rule := num-nhmn1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

num-nhmn6-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR nhmn6-cn-lx-noun-lex &
        [ INFLECTED #infl ] ].

num-nhmn6-sg-lex-rule := num-nhmn6-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

num-nhmn6-pl-lex-rule := num-nhmn6-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

aspect-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED.ASPECT-FLAG +,
    DTR verb-lex ].

trans-perf-aspect-lex-rule := aspect-lex-rule-super & const-lex-rule &
  [ DTR.ARG-ST #arg-st,
    ARG-ST #arg-st &
           < [ LOCAL.CAT.HEAD.CASE nom ],
             [ LOCAL.CAT.HEAD.CASE acc ] >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

intrans-perf-aspect-lex-rule := aspect-lex-rule-super & infl-lex-rule &
  [ DTR.ARG-ST #arg-st,
    ARG-ST #arg-st &
           < [ LOCAL.CAT.HEAD.CASE nom ] >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

imperf-aspect-lex-rule := aspect-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

question-lex-rule := aspect-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

num-adj-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR attr-adj-adj-lex &
        [ INFLECTED #infl ] ].

sg-adj-lex-rule := num-adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG.NUM sg ].

pl-adj-lex-rule := num-adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG.NUM pl ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

basic-head-1st-comp-phrase :+ [ SYNSEM.L-PERIPH - ].

; The head of head-comp-phrase can't be: ['comp']

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ SYNSEM.LOCAL.CAT [ HC-LIGHT -,
                       HEAD +nvjrpdmo ] ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ SYNSEM [ LOCAL.CAT.MC +,
             NON-LOCAL.SLASH 0-dlist ],
    HEAD-DTR.SYNSEM [ L-PERIPH -,
                      LOCAL.CAT.VAL.COMPS < > ] ].

subj-head-nmc-phrase := basic-head-subj-nmc-phrase & head-final &
  [ SYNSEM.LOCAL.CAT.MC -,
    HEAD-DTR.SYNSEM.NON-LOCAL.SLASH.LIST < [ CONT.HOOK.ICONS-KEY focus-or-topic ] > ].

infostr-dislocated-phrase := narrow-focus &
  [ SYNSEM.LOCAL.CAT [ MC +,
                       VAL.SUBJ < > ],
    C-CONT [ RELS <!  !>,
             HCONS <!  !>,
             ICONS <! info-str & #icons &
                      [ IARG1 #clause,
                        IARG2 #index ] !> ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ MC -,
                                  HEAD verb ],
                            CONT.HOOK [ INDEX #clause,
                                        CLAUSE-KEY #clause ] ],
    NON-HEAD-DTR.SYNSEM [ LIGHT -,
                          LOCAL [ CAT.HEAD +np,
                                  CONT.HOOK [ INDEX #index,
                                              ICONS-KEY #icons ] ] ] ].

infostr-filler-head-phrase := basic-head-filler-phrase & infostr-dislocated-phrase & head-final &
  [ SYNSEM.L-PERIPH +,
    HEAD-DTR.SYNSEM [ L-PERIPH -,
                      LOCAL.CAT.VAL.SUBJ < > ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CONT.HOOK.ICONS-KEY semantic-focus ].

poss-phrase-1 := head-final &
  [ SYNSEM.LOCAL.CAT [ HEAD #head,
                       VAL [ COMPS < >,
                             SUBJ < >,
                             SPR < > ] ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD #head & noun &
                                       [ PRON - ],
                                  VAL.SPR < [ ] > ],
                            CONT.HOOK #hook &
                                      [ LTOP #lbl,
                                        INDEX #possessum &
                                              [ COG-ST uniq-id ] ] ],
    C-CONT [ HOOK #hook &
                  [ INDEX #possessum ],
             ICONS <!  !>,
             RELS <! arg12-ev-relation &
                     [ PRED "poss_rel",
                       LBL #lbl,
                       ARG1 #possessum,
                       ARG2 #possessor ], quant-relation &
                                          [ PRED "exist_q_rel",
                                            ARG0 #possessum,
                                            RSTR #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #lbl ] !> ],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CONT.HOOK.INDEX #possessor,
                                CAT [ VAL.SPR < >,
                                      HEAD noun &
                                           [ PRON - ] ] ] ].

head-adj-int-phrase :+ [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.POSSESSOR nonpossessive ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-spec-poss-phrase-2 := basic-head-spec-phrase-super & head-final &
  [ C-CONT.HOOK #hook,
    HEAD-DTR.SYNSEM.LOCAL [ CONT.HOOK #hook,
                            CAT.POSSESSUM nonpossessive ],
    NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT [ VAL [ SPR olist,
                                            COMPS olist ],
                                      HEAD +nvjrpcmo &
                                           [ POSSESSOR possessor-2 ] ] ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; comp-head-phrase requires things that are [ HEAD comp ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ SYNSEM.LOCAL.CAT.HEAD comp ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

n2-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

np2-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].
