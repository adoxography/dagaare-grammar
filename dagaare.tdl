;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Dagaare
;;; created at:
;;;     Sat Jan 20 03:27:21 UTC 2018
;;; based on Matrix customization system version of:
;;;     Fri Jan 19 17:19:40 UTC 2018
;;;
;;; Based on Bodomo 1997
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

png :+ [ PER person,
    NUM number,
    GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
sg := number.
pl := number.

;;; Gender

gender := *top*.
an := gender.
inan := gender.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

cn-lex-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

inan-cn-lx-noun-lex := cn-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND inan ].

an-cn-lx-noun-lex := cn-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND an ].

pn-lx-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

pron-lex-noun-lex := no-spr-noun-lex.

1st-sg-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                       NUM sg ] ].

2nd-sg-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM sg ] ].

3rd-sg-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 3rd ] ].

str-pron-lex-noun-lex := nom-pron-lex-noun-lex.

wk-pron-lex-noun-lex := nom-pron-lex-noun-lex.

2nd-sg-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 2nd ] ].

3rd-sg-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 3rd ] ].

nom-pron-lex-noun-lex := pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

1st-sg-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

1st-pl-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

1st-pl-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

2nd-pl-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 2nd ] ].

2nd-pl-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM pl ] ].

3rd-pl-an-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND an ] ].

3rd-pl-an-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND an ] ].

3rd-pl-inan-nom-wk-pron-noun-lex := wk-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND inan ] ].

3rd-pl-inan-nom-str-pron-noun-lex := str-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND inan ] ].

acc-pron-lex-noun-lex := pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

1st-sg-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

2nd-sg-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 2nd ] ].

3rd-sg-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 3rd ] ].

1st-pl-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

2nd-pl-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 2nd ] ].

3rd-pl-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND an ] ].

3rd-pl-inan-acc-pron-noun-lex := acc-pron-lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd,
                                       GEND inan ] ].

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

itr-verb-lex-verb-lex := nom-intransitive-verb-lex.

tr-verb-lex-verb-lex := nom-acc-transitive-verb-lex.

dtr-verb-lex-verb-lex := tr-verb-lex-verb-lex.

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

det-lx-determiner-lex := determiner-lex & no-icons-lex-item.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
